name: Packer Build CI/CD

on:
  push:
    branches:
      - main  # This ensures the workflow only runs when a PR is merged to main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.0"

      - name: Zip WebApp
        run: |
          zip -r webapp.zip .
        working-directory: ../
        id: zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set Environment Variables for Packer
        run: |
          echo "PKR_VAR_aws_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "PKR_VAR_instance_type=${{ vars.INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "PKR_VAR_ami_name_prefix=${{ vars.AMI_NAME_PREFIX }}" >> $GITHUB_ENV
          echo "PKR_VAR_source_ami=${{ vars.SOURCE_AMI }}" >> $GITHUB_ENV
          echo "PKR_VAR_ssh_username=${{ vars.SSH_USERNAME }}" >> $GITHUB_ENV
          echo "PKR_VAR_project_path=${{ vars.PROJECT_PATH }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_HOST=${{ vars.DB_HOST }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_PORT=${{ vars.DB_PORT }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_DIALECT=${{ vars.DB_DIALECT }}" >> $GITHUB_ENV
          echo "PKR_VAR_DB_FORCE_CHANGES=${{ vars.DB_FORCE_CHANGES }}" >> $GITHUB_ENV

      - name: Run Packer Build
        id: packer-build
        run: |
          packer init machine-image.pkr.hcl
          
          AMI_OUTPUT=$(packer build -machine-readable \
            -var "aws_region=${{ vars.AWS_REGION }}" \
            -var "source_ami=${{ vars.SOURCE_AMI }}" \
            -var "instance_type=${{ vars.INSTANCE_TYPE }}" \
            -var "ami_name_prefix=${{ vars.AMI_NAME_PREFIX }}" \
            -var "project_path=${{ vars.PROJECT_PATH }}" \
            -var "ssh_username=${{ vars.SSH_USERNAME }}" \
            machine-image.pkr.hcl | tee output.log | grep 'artifact,0,id')

          echo "Full AMI Output: $AMI_OUTPUT"

          AMI_ID=$(echo "$AMI_OUTPUT" | cut -d ',' -f6 | cut -d ':' -f2)
          echo "Extracted AMI ID: $AMI_ID"

          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Store AMI ID in AWS SSM Parameter Store
        run: |
          if [[ -z "$AMI_ID" ]]; then
            echo "Error: AMI_ID is empty. Exiting..."
            exit 1
          fi

          aws ssm put-parameter --name "/custom-ami/latest" \
            --type "String" \
            --value "$AMI_ID" \
            --region ${{ vars.AWS_REGION }} \
            --overwrite