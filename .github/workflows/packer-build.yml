name: Packer Build CI/CD

on:
  push:
    branches:
      - main  # This ensures the workflow only runs when a PR is merged to main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"${{ secrets.DB_USER }}" -p"${{ secrets.DB_PASSWORD }}" --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done
          echo "MySQL did not become ready in time!"
          exit 1

      - name: Run Tests
        run: npm test
        env:
          DB_HOST: 127.0.0.1
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: 3306
          DB_DIALECT: mysql
          DB_FORCE_CHANGES: false
          NODE_ENV: test


      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.0"

      - name: Zip WebApp
        run: |
          zip -r webapp.zip .
        working-directory: ../
        id: zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate Packer Variables File
        run: |
          cat <<EOF > packer.auto.pkrvars.hcl
          ssh_username      = "${{ vars.SSH_USERNAME }}"
          project_path      = "${{ vars.PROJECT_PATH }}"

          #AWS variables
          aws_region        = "${{ vars.AWS_REGION }}"
          instance_type     = "${{ vars.INSTANCE_TYPE }}"
          ami_name_prefix   = "${{ vars.AMI_NAME_PREFIX }}"
          source_ami        = "${{ vars.SOURCE_AMI }}"
          aws_ami_users     = ${AWS_AMI_USERS}
          EOF
        env:
          AWS_AMI_USERS: ${{ secrets.AWS_AMI_USERS }}

      - name: Run Packer Build
        id: packer-build
        run: |
          packer init machine-image.pkr.hcl
          packer build -var-file=packer.auto.pkrvars.hcl machine-image.pkr.hcl
           
      - name: Fetch Latest AMI ID from Packer Manifest
        id: fetch-ami-id
        run: |
          if [[ -f manifest.json ]]; then
            AMI_ID=$(jq -r '.builds[-1].artifact_id | split(":")[1]' manifest.json || echo "null")
            if [[ "$AMI_ID" == "null" ]]; then
              echo "Failed to parse AMI ID from manifest.json"
              exit 1
            fi
            echo "ami=$AMI_ID" >> $GITHUB_OUTPUT
          else
            echo "manifest.json file not found"
            exit 1
          fi
  update_launch_template_demo:
    needs: build-and-test
    runs-on: ubuntu-latest
    name: Update Launch Template for Demo & Trigger Instance Refresh 
    steps:
      - name: Configure AWS Credentials for Demo
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update Launch Template with latest AMI ID
        run: |
          AMI_ID=${{ needs.build.outputs.ami_id }}
          echo "Updating Launch Template with the new AMI ID"
          aws ec2 create-launch-template-version \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --source-version 1 \
            --launch-template-name ${{ vars.LAUNCH_TEMPLATE_NAME }} \
            --no-cli-pager

      - name: Instance Refresh for Auto Scaling Group
        run: |
          echo "Triggering instance refresh for Auto Scaling Group"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.AUTO_SCALING_GROUP_NAME }} \
            --strategy Rolling \
            --no-cli-pager
          echo "Instance refresh initiated"

      - name: Check Instance Refresh Status
        run: |
          REFRESH_STATUS="Pending"
          while [ "$REFRESH_STATUS" != "Successful" ] && [ "$REFRESH_STATUS" != "Failed" ] && [ "$REFRESH_STATUS" != "Cancelled" ]; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ vars.AUTO_SCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
            echo "Instance Refresh Status: $REFRESH_STATUS"
            sleep 30
          done
          if [ "$REFRESH_STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            exit 0
          elif [ "$REFRESH_STATUS" == "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          elif [ "$REFRESH_STATUS" == "Cancelled" ]; then
            echo "Instance refresh cancelled."
            exit 1
          else
            echo "Unexpected exit: $REFRESH_STATUS"
            exit 1
          fi