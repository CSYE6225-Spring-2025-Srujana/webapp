name: Packer Build CI/CD

on:
  push:
    branches:
      - main  # This ensures the workflow only runs when a PR is merged to main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"${{ secrets.DB_USER }}" -p"${{ secrets.DB_PASSWORD }}" --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done
          echo "MySQL did not become ready in time!"
          exit 1

      - name: Run Tests
        run: npm test
        env:
          DB_HOST: 127.0.0.1
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: 3306
          DB_DIALECT: mysql
          DB_FORCE_CHANGES: false
          NODE_ENV: test


      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.0"

      - name: Zip WebApp
        run: |
          zip -r webapp.zip .
        working-directory: ../
        id: zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate Packer Variables File
        run: |
          cat <<EOF > packer.auto.pkrvars.hcl
          ssh_username      = "${{ vars.SSH_USERNAME }}"
          project_path      = "${{ vars.PROJECT_PATH }}"

          #AWS variables
          aws_region        = "${{ vars.AWS_REGION }}"
          instance_type     = "${{ vars.INSTANCE_TYPE }}"
          ami_name_prefix   = "${{ vars.AMI_NAME_PREFIX }}"
          source_ami        = "${{ vars.SOURCE_AMI }}"
          aws_vpc           = "${{ vars.AWS_VPC }}"
          aws_subnet        = "${{ vars.AWS_SUBNET }}"
          EOF

      - name: Run Packer Build
        id: packer-build
        run: |
          packer init machine-image.pkr.hcl
          packer build -var-file=packer.auto.pkrvars.hcl machine-image.pkr.hcl