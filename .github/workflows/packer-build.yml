name: Packer Build CI/CD

on:
  push:
    branches:
      - main  # This ensures the workflow only runs when a PR is merged to main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"${{ secrets.DB_USER }}" -p"${{ secrets.DB_PASSWORD }}" --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done
          echo "MySQL did not become ready in time!"
          exit 1

      - name: Run Tests
        run: npm test
        env:
          DB_HOST: 127.0.0.1
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: 3306
          DB_DIALECT: mysql
          DB_FORCE_CHANGES: false
          NODE_ENV: test


      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.0"

      - name: Zip WebApp
        run: |
          zip -r webapp.zip .
        working-directory: ../
        id: zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

       # Install Google Cloud SDK
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          
      # Authenticate with Google Cloud using the service account
      - name: Authenticate with GCP
        uses : google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Verify Authentication
        run: gcloud auth list

      - name: Generate Packer Variables File
        run: |
          cat <<EOF > packer.auto.pkrvars.hcl
          ssh_username      = "${{ vars.SSH_USERNAME }}"
          project_path      = "${{ vars.PROJECT_PATH }}"

          #AWS variables
          aws_region        = "${{ vars.AWS_REGION }}"
          instance_type     = "${{ vars.INSTANCE_TYPE }}"
          ami_name_prefix   = "${{ vars.AMI_NAME_PREFIX }}"
          source_ami        = "${{ vars.SOURCE_AMI }}"
          aws_vpc           = "${{ vars.AWS_VPC }}"
          aws_subnet        = "${{ vars.AWS_SUBNET }}"

          # Database Variables
          DB_HOST          = "${{ vars.DB_HOST }}"
          DB_USER          = "${{ vars.DB_USER }}"
          DB_PASSWORD      = "${{ secrets.DB_PASSWORD }}"
          DB_NAME          = "${{ vars.DB_NAME }}"
          DB_PORT          = "${{ vars.DB_PORT }}"
          DB_DIALECT       = "${{ vars.DB_DIALECT }}"
          DB_FORCE_CHANGES = "${{ vars.DB_FORCE_CHANGES }}"

          # GCP Variables
          gcp_project_id   = "${{ vars.GCP_PROJECT_ID }}"
          gcp_source_image = "${{ vars.GCP_SOURCE_IMAGE }}"
          gcp_machine_type = "${{ vars.GCP_MACHINE_TYPE }}"
          gcp_zone         = "${{ vars.GCP_ZONE }}"
          gcp_image_prefix = "${{ vars.GCP_IMAGE_PREFIX }}"
          EOF

      - name: Run Packer Build
        id: packer-build
        run: |
          packer init machine-image.pkr.hcl
          packer build -machine-readable -var-file=packer.auto.pkrvars.hcl machine-image.pkr.hcl 2>&1 | tee output.log | awk '{ print; system(""); }'

          # Extract AWS AMI ID
          AMI_OUTPUT=$(grep 'amazon-ebs\.ubuntu,artifact,0,id' output.log)
          echo "Full AMI Output: $AMI_OUTPUT"

          # Extract AMI ID from log
          AMI_ID=$(echo "$AMI_OUTPUT" | cut -d ',' -f6 | cut -d ':' -f2)
          echo "Extracted AMI ID: $AMI_ID"

          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Store AMI ID in AWS SSM Parameter Store
        run: |
          if [[ -z "$AMI_ID" ]]; then
            echo "Error: AMI_ID is empty. Exiting..."
            exit 1
          fi

          aws ssm put-parameter --name "/custom-ami/latest" \
            --type "String" \
            --value "$AMI_ID" \
            --region ${{ vars.AWS_REGION }} \
            --overwrite